"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
–ó–∞–ø—É—Å–∫–∞—Ç—å: python manage.py check_images
"""

from django.core.management.base import BaseCommand
import os
import re
from pathlib import Path

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º'

    def handle(self, *args, **options):
        self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.check_all_images()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
        self.check_template_paths()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –≤ CSS
        self.check_css_paths()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))

    def check_all_images(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.stdout.write('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ–¥–∞
        all_images = [
            # Services
            'media/services/modelix.png',
            'media/services/hero_block.png',
            'media/services/printer.jpg',
            'media/services/3d_modeling.jpg',
            'media/services/3d_printing.jpg',
            'media/services/3d_scanning.jpg',
            'media/services/reverse_engineering.jpg',
            'media/services/engineering.jpg',
            'media/services/post_processing.jpg',
            
            # Portfolio
            'media/portfolio/portfl1.jpg',
            'media/portfolio/portfl2.jpg',
            'media/portfolio/portfl3.jpg',
            'media/portfolio/portfl4.jpg',
            'media/portfolio/portfl5.jpg',
            'media/portfolio/portfl6.jpg',
            'media/portfolio/portfl7.jpeg',
            'media/portfolio/portfl8.jpg',
        ]
        
        missing_count = 0
        total_count = len(all_images)
        
        for image_path in all_images:
            if os.path.exists(image_path):
                self.stdout.write(f'  ‚úÖ {image_path}')
            else:
                self.stdout.write(f'  ‚ùå {image_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!')
                missing_count += 1
        
        self.stdout.write(f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {total_count - missing_count}/{total_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ')
        
        if missing_count > 0:
            self.stdout.write(self.style.ERROR(f'‚ùå –ù–∞–π–¥–µ–Ω–æ {missing_count} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!'))
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ!'))

    def check_template_paths(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Ç–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""
        self.stdout.write('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö...')
        
        template_path = 'main/templates/main/index.html'
        if os.path.exists(template_path):
            with open(template_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –≤—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            image_paths = re.findall(r'src="([^"]*\.(?:jpg|jpeg|png|gif|webp))"', content)
            
            for path in image_paths:
                if path.startswith('/media/'):
                    # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    file_path = path[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª '/'
                    if os.path.exists(file_path):
                        self.stdout.write(f'  ‚úÖ {path}')
                    else:
                        self.stdout.write(f'  ‚ùå {path} - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù!')
                elif path.startswith('{{'):
                    self.stdout.write(f'  ‚ö†Ô∏è {path} - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)')
                else:
                    self.stdout.write(f'  ‚ÑπÔ∏è {path} - –≤–Ω–µ—à–Ω–∏–π –ø—É—Ç—å')

    def check_css_paths(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Ç–∏ –≤ CSS"""
        self.stdout.write('üé® –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –≤ CSS...')
        
        css_files = [
            'static/css/styles.css',
            'static/css/mobile.css',
            'static/css/hero-responsive.css',
        ]
        
        for css_file in css_files:
            if os.path.exists(css_file):
                with open(css_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ CSS
                image_paths = re.findall(r'url\(["\']?([^"\']*\.(?:jpg|jpeg|png|gif|webp))["\']?\)', content)
                
                for path in image_paths:
                    if path.startswith('/media/'):
                        file_path = path[1:]  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à
                        if os.path.exists(file_path):
                            self.stdout.write(f'  ‚úÖ {css_file}: {path}')
                        else:
                            self.stdout.write(f'  ‚ùå {css_file}: {path} - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù!')
                    else:
                        self.stdout.write(f'  ‚ÑπÔ∏è {css_file}: {path} - –≤–Ω–µ—à–Ω–∏–π –ø—É—Ç—å')


