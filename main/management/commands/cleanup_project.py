"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–ó–∞–ø—É—Å–∫–∞—Ç—å: python manage.py cleanup_project
"""

from django.core.management.base import BaseCommand
import os
import shutil
from pathlib import Path

class Command(BaseCommand):
    help = '–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'

    def handle(self, *args, **options):
        self.stdout.write('üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞...')
        
        # –û—á–∏—â–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.cleanup_files()
        
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏
        self.cleanup_directories()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à Python
        self.cleanup_python_cache()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))

    def cleanup_files(self):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        self.stdout.write('üìÅ –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã...')
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        files_to_delete = [
            # –°—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç—ã
            'DEPLOYMENT_GUIDE.md',
            'ZIP_DEPLOY_INSTRUCTIONS.md',
            '–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô_–î–ï–ü–õ–û–ô.md',
            '–ê–ù–ê–õ–ò–ó_–ú–ï–î–ò–ê–§–ê–ô–õ–û–í.md',
            '–ê–ù–ê–õ–ò–ó_–ü–†–û–ë–õ–ï–ú_VPS.md',
            '–ê–ù–ê–õ–ò–ó_–ü–£–¢–ï–ô_–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô.md',
            '–î–ê–ù–ù–´–ï_–°–ê–ô–¢–ê.md',
            '–ò–ù–°–¢–†–£–ö–¶–ò–Ø_–î–õ–Ø_–ó–ê–ö–ê–ó–ß–ò–ö–ê.md',
            '–ò–ù–°–¢–†–£–ö–¶–ò–Ø_–ó–ê–ü–û–õ–ù–ï–ù–ò–Ø_–î–ê–ù–ù–´–•.md',
            '–û–¢–ß–ï–¢_–ê–î–ú–ò–ù–ö–ò.md',
            '–û–¢–ß–ï–¢_–£–î–ê–õ–ï–ù–ò–Ø_CONSOLE_LOG.md',
            
            # –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–µ–ø–ª–æ—è
            'deploy.sh',
            'production_settings.py',
            'modelix_project_backup.tar.gz',
            'modelix.png',  # –î—É–±–ª–∏–∫–∞—Ç –≤ –∫–æ—Ä–Ω–µ
            
            # –õ–æ–≥–∏
            'django_errors.log',
            
            # –°—Ç–∞—Ä—ã–µ CSS —Ñ–∞–π–ª—ã
            'static/css/styles_backup.css',
        ]
        
        deleted_count = 0
        for file_path in files_to_delete:
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    self.stdout.write(f'  ‚úÖ –£–¥–∞–ª–µ–Ω: {file_path}')
                    deleted_count += 1
                except Exception as e:
                    self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}')
        
        self.stdout.write(f'üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}')

    def cleanup_directories(self):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏"""
        self.stdout.write('üìÇ –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏...')
        
        # –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        dirs_to_delete = [
            'backups',  # –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
        ]
        
        deleted_count = 0
        for dir_path in dirs_to_delete:
            if os.path.exists(dir_path):
                try:
                    shutil.rmtree(dir_path)
                    self.stdout.write(f'  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_path}')
                    deleted_count += 1
                except Exception as e:
                    self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ {dir_path}: {e}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dir_path}')
        
        self.stdout.write(f'üìä –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: {deleted_count}')

    def cleanup_python_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à Python"""
        self.stdout.write('üêç –û—á–∏—â–∞–µ–º –∫—ç—à Python...')
        
        # –ò—â–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ __pycache__
        cache_dirs = []
        for root, dirs, files in os.walk('.'):
            for dir_name in dirs:
                if dir_name == '__pycache__':
                    cache_dirs.append(os.path.join(root, dir_name))
        
        deleted_count = 0
        for cache_dir in cache_dirs:
            try:
                shutil.rmtree(cache_dir)
                self.stdout.write(f'  ‚úÖ –£–¥–∞–ª–µ–Ω –∫—ç—à: {cache_dir}')
                deleted_count += 1
            except Exception as e:
                self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—ç—à–∞ {cache_dir}: {e}')
        
        self.stdout.write(f'üìä –£–¥–∞–ª–µ–Ω–æ –∫—ç—à-–ø–∞–ø–æ–∫: {deleted_count}')


